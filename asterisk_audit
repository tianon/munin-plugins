#!/usr/bin/perl
use warnings;
use strict;

use Time::Local;
use Text::CSV;

my $cdrCsv = $ENV{CDRCSV} || '/var/log/asterisk/cdr-csv/Master.csv';
my $cdrCsvIsGmt = defined $ENV{CDRCSV_ISGMT} ? $ENV{CDRCSV_ISGMT} : 1;
my $invoiceDay = $ENV{INVOICE_DAY} || 25;

my $periodOffset = 0;
my $incomingRegex = 'VI-Incoming';
my $outgoingRegex = 'IV-Outgoing';

my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = gmtime;

if ($mday < $invoiceDay) {
	--$mon;
}
$mon += $periodOffset;
$mday = $invoiceDay;
$sec = $min = $hour = 0;

my $billStart = timegm($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst);
my $billEnd = timegm($sec, $min, $hour, $mday, $mon + 1, $year, $wday, $yday, $isdst);

sub convertStamp {
	my $stamp = shift;
	
	if ($stamp =~ m! ^ (\d{4})-(\d{2})-(\d{2}) (?: \s+ (\d{2}):(\d{2}):(\d{2}) )? $ !gx) {
		my @args = ($6, $5, $4, $3, $2 - 1, $1 - 1900, undef, undef, undef);
		if ($cdrCsvIsGmt) {
			return timegm(@args);
		}
		else {
			return timelocal(@args);
		}
	}
	
	return undef;
}

sub prettyDate {
	my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = gmtime shift;
	my $includeTime = shift;
	$includeTime = 1 unless defined $includeTime;
	
	return sprintf('%04d-%02d-%02d', $year + 1900, $mon + 1, $mday) . ($includeTime ? sprintf(' %02d:%02d:%02d GMT', $hour, $min, $sec) : '');
}

if (exists $ARGV[0] && $ARGV[0] eq 'config') {
	print 'graph_title Asterisk Audit (', prettyDate($billStart, 0), ' - ', prettyDate($billEnd, 0), ')', "\n";
	print 'graph_category asterisk', "\n";
	print 'graph_args --base 1000 -l 0', "\n";
	print 'graph_vlabel Call Duration (seconds)', "\n";
	print 'in.label Incoming', "\n";
	print 'in.draw AREA', "\n";
	print 'out.label Outgoing', "\n";
	print 'out.draw STACK', "\n";
	print 'total.label Total', "\n";
	print 'total.draw LINE2', "\n";
	exit unless 1 == int(defined $ENV{MUNIN_CAP_DIRTYCONFIG} ? $ENV{MUNIN_CAP_DIRTYCONFIG} : 0);
}

my $csv = Text::CSV->new({ binary => 1 });
open my $fh, '<:encoding(utf8)', $cdrCsv or die "open failed: $!";

my $inDuration = 0;
my $outDuration = 0;

my @bill;
while (my $row = $csv->getline($fh)) {
	# see http://www.voip-info.org/wiki/view/Asterisk+cdr+csv
	my %e;
	(
		$e{accountcode},
		$e{src},
		$e{dst},
		$e{dcontext},
		$e{clid},
		$e{channel},
		$e{dstchannel},
		$e{lastapp},
		$e{lastdata},
		$e{start},
		$e{answer},
		$e{end},
		$e{duration},
		$e{billsec},
		$e{disposition},
		$e{amaflags},
		$e{uniqueid},
	) = @$row;
	$e{start} = convertStamp $e{start} if $e{start};
	$e{answer} = convertStamp $e{answer} if $e{answer};
	$e{end} = convertStamp $e{end} if $e{end};
	next if $e{end} < $billStart;
	next if $e{end} >= $billEnd;
	push @bill, \%e;
	
	if ($e{channel} =~ $incomingRegex or $e{dstchannel} =~ $incomingRegex) {
		$inDuration += $e{duration};
	}
	elsif ($e{channel} =~ $outgoingRegex or $e{dstchannel} =~ $outgoingRegex) {
		$outDuration += $e{duration};
	}
}

$csv->eof or $csv->error_diag;
close $fh;

print 'in.value ', $inDuration, "\n";
print 'out.value ', $outDuration, "\n";
print 'total.value ', $inDuration + $outDuration, "\n";
print 'total.warning :', (($ENV{warn} || 100) * 60), "\n";
print 'total.critical :', (($ENV{crit} || 300) * 60), "\n";
